import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:flutter_svg/flutter_svg.dart';

class SvgCanvasPainter {
  final String title;
  final String svg;
  final PictureInfo pictureInfo;
  final ui.Image image;
  final Uint8List asUint8List;

  SvgCanvasPainter(
      this.title, this.svg, this.pictureInfo, this.image, this.asUint8List) {
    print('SvgCanvasPainter');
  }

  Uint8List getImage() {
    return this.asUint8List;
  }

  void dispose() {
    print('dispose');
    pictureInfo.picture.dispose();
  }

  static Future<SvgCanvasPainter> loadSvg(
      String title, String svg, int width, int height) async {
    final String rawSvg =
        '''<svg t="1725964173762" class="icon" viewBox="0 0 1922 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="5348" width="32" height="32"><path d="M280.322341 188.357669c-19.76023 59.106768-29.633656 196.130651-29.633655 411.085028s-24.777215 333.234805-74.318265 354.868042c-5.338072 2.194095-10.194513 3.291142-14.582702 3.291142-40.135877 0-60.203815-84.659943-60.203815-253.979827 0-188.759028-10.662765-283.145231-31.988294-283.145231-7.839875 0-11.759812-7.050536-11.759812-21.164986 0-24.456128 12.06752-70.853201 36.21594-139.217978 37.928403-106.921975 83.402352-160.382963 136.395087-160.382963 53.006114-0.013379 69.635746 29.553384 49.875516 88.646773z m38.570578 432.009198c19.118056-143.28508 52.751921-214.940998 100.888215-214.940998 48.136295 0 63.735772 71.655918 46.798432 214.940998-16.93734 143.298458-50.557826 214.940998-100.888215 214.940998s-65.929867-71.64254-46.798432-214.940998z m14.810138-403.084609c23.987876-76.191273 60.203815-114.293598 108.647818-114.293598s70.625764 6.114032 66.558662 18.342095c-4.080481 12.228064 60.979775 18.342096 195.194147 18.342096 134.200993 0 201.308179 26.971309 201.308179 80.900549s-24.068147 88.593258-72.191063 103.95192c-48.136295 15.358662-72.191063 7.920146-72.191064-22.342305s-48.524275-45.393677-145.572825-45.393676c-97.04855 0-149.41249 12.468879-157.091821 37.393258-7.69271 24.924379-36.376483 37.393258-86.078077 37.393259-49.714973 0-62.571832-38.088947-38.583956-114.293598z m140.408675 757.725215c-40.764672 0-61.140319-16.93734-61.140318-50.798641s20.295375-50.798641 60.912882-50.798641c40.604129 0 60.912882-95.309328 60.912882-285.968121 0-190.645414 24.924379-285.968121 74.786517-285.968122s74.786517 93.757408 74.786517 281.258845c0 187.514816-24.844108 299.761484-74.545702 336.766763s-94.961484 55.507917-135.712778 55.507917z m314.89271-569.113352c46.249909 0 77.689679 71.027123 94.305932 213.06799 4.388189 36.055396 6.582284 67.575438 6.582283 94.533368 0 79.014163-18.181552 118.521244-54.558035 118.521244-48.604547 0-80.030938-71.027123-94.305931-213.06799s1.725843-213.054612 47.975751-213.054612zM1410.789443 183.180141c18.663183-0.160544 22.181761 17.806951 10.582493 53.848968-11.599268 36.055396-20.92417 54.02289-27.988084 53.848968-7.050536-0.160544-10.502221 64.511732-10.341678 194.016828 0.160544 129.518474-12.616044 212.760282-38.329762 249.752181-25.713718 37.005278-16.228273 85.917533 28.456336 146.750144s39.895061 91.242226-14.341886 91.242226c-54.558035 0-90.305722-11.131016-107.243063-33.393049s-33.085341-22.262033-48.444003 0-50.477554 33.393049-105.356676 33.393049c-31.667207 0-47.507499-10.033969-47.507499-30.101907 0-15.050954 8.776378-35.4266 26.342513-61.140319 40.764672-60.83261 47.266684-109.517429 19.519415-146.041076-27.747269-36.510269-41.701176-119.765456-41.861719-249.752182-0.160544-129.973347-5.324693-194.953332-15.519206-194.953332S1023.464855 272.790175 1023.464855 237.042488s5.097256-53.621531 15.291769-53.621532 15.291769-14.261615 15.291769-42.798223c0-28.52323 22.730285-42.798223 68.204233-42.798223s68.204233 14.274993 68.204233 42.798223c0 28.536608 8.85665 42.798223 26.569951 42.798223s26.56995-13.873635 26.56995-41.620904 23.198537-41.620904 69.608989-41.620904 69.608989 13.873635 69.608988 41.620904 9.324902 41.554011 27.974706 41.380089z m-193.548575 107.483878c-17.566135 0-26.342514 57.073217-26.342514 171.206271s4.629004 177.400575 13.873635 189.789182c9.24463 12.401986 18.034387 12.401986 26.342513 0 8.308126-12.388607 12.468879-75.642749 12.468879-189.789182 0-114.133055-8.776378-171.206271-26.342513-171.206271z m227.18244-134.294644c0-35.279436 70.318056-52.912464 210.954168-52.912464s211.101333 15.358662 211.422419 46.089365v0.468252c0 30.730703-12.856859 80.124588-38.570577 148.1549-26.021427 68.364777-39.038829 112.099504-39.038829 131.230938 0 19.131435 14.422158 28.697152 43.266475 28.697152 18.810348 0 28.215521 7.839875 28.215521 23.519623 0 7.839875-2.354638 17.566135-7.050536 29.165404-14.422158 35.118892-28.764045 52.685027-43.039038 52.685028s-21.405801 50.972563-21.405801 152.864175c0 101.904991-20.308754 169.721244-60.912882 203.422002s-92.887797 50.557826-156.864385 50.557826-95.951502-16.857068-95.951502-50.557826 28.764045-50.557826 86.305513-50.557826 86.305513-50.959185 86.305514-152.864176c0-101.891612-36.684191-152.864176-110.065953-152.864175s-110.065952-17.566135-110.065952-52.685028 36.684191-52.685027 110.065952-52.685027 109.985681-12.147792 109.825137-36.456755c-0.160544-24.295584 11.438725-65.769323 34.811184-124.407839 23.35908-58.625137-10.502221-87.951084-101.597282-87.951084s-136.609146-17.633028-136.609146-52.912465z" fill="" p-id="5349"></path></svg>''';
    final PictureInfo pictureInfo =
        await vg.loadPicture(SvgStringLoader(rawSvg), null);

    final ui.Image image = await pictureInfo.picture.toImage(width, height);
    final pngBytes = await image.toByteData(format: ImageByteFormat.png);
    print('pngBytes: ${pngBytes!.lengthInBytes}');

    return SvgCanvasPainter(
        title, svg, pictureInfo, image, pngBytes.buffer.asUint8List());
  }
}

class WSvgViewerPartial extends ConsumerWidget {
  const WSvgViewerPartial({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Container(
      width: 200,
      height: 200,
      padding: const EdgeInsets.all(16),
      child: FutureBuilder<SvgCanvasPainter>(
        future: SvgCanvasPainter.loadSvg('test', 'test', 1922, 1024),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done &&
              snapshot.data != null) {
            return Image.memory(
              snapshot.data!.getImage(),
              fit: BoxFit.contain,
            );
          } else {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),
    );
  }
}
